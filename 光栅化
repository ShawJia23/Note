#光栅化
#输入准备
读取贴图  tga格式有个头来标记 读取到文件头之后后面的都是颜色
用uv坐标 
线性采样
读取模型
Obj文件
存的信息是pos uv 法线 有时候还有切线
光滑面s
#变换
model view project矩阵变换
Model矩阵从物体坐标系转换到世界坐标系
View矩阵从世界坐标系转换到观察坐标系视锥体
Project矩阵将视锥体转换为正六面体 完成之后是cvv空间
然后透视除法约束到ndc(正六面体) 要进行透视除法约束到区间 dx是0到1 opengl是-1到1
然后viewport矩阵是其显示在屏幕上
#线框显示算法
#三角形填充算法
方法1.任意三角形分解成上底或者下底与x平行的三角形，因为要使用与x轴平行的扫描线(y为变量)
方法2.构造成上底或者下底为0的梯形
此时的画线只在x方向进行 逐x进行步进，避免三角形的重绘(测试重绘使用单一颜色叠加 重复绘制会导致颜色加深)，采用左上规则(看这个点中心0.5是否被左上包围)
所有的属性值由增量法获得(算出所有增量，然后除总的步进次数得到单次增量然后递增)
##扫描线
dda
bresenham
##重心坐标法 
计算一个点相对于xyz的位置 属性使用xyz的插值

##关于插值后属性
深度缓存
令z=1/z,直接插值 属性差值与1/z是线性关系
透视矫正
求z值利用屏幕空间的比值求出真实z值的比值，1/z是线性关系
属性插值 
其余的属性值与1/z是线性关系，要1/z求

#裁剪
Cvv(齐次坐标空间)裁剪
判断在面内的点,然后判断线面相交，新生成的点
新生成的点加入新vb，index加入新ib，6个裁剪面，2个vb ib重复使用
加入在面内的且是起始点的点，然后加入交点，这样可以保证三角形绕序 
测试方法xy平面用线框，z用光栅化斜过来顶点
裁剪之后再透视除法

#纹理
法线纹理采样
缩放的m矩阵 法线和模型不一样
用三个点算出法线，然后找到所有包含这个点的法线值用角度求加权平均
Tangent和binormal不能提前归一化
乘面积当权重会出错
用三个点和uv算出每个顶点的切线，并算出首向性，然后根据手相性不同去拆开点，
然后点相同的手向性质相同的点也根据角度进行加权平均，进行合点
Vs ps都可以
切线法线要进行m矩阵变化
切线和法线得到副切线
在vs的话，切线和副切线要进行属性插值
在ps的话，效率会更低，但会更准确，准确性相差不大

#fps相机漫游

#Fps显示

#Blinphong光照


#后续 
支持多buffer 多texture

保证整体性 不用多行注释
多模型 多draw
指针直接使用，不拷贝
用的话用指针
Resourec
查内存泄露
类型直接传参进来,返回会有拷贝
要用引用传递

数组提前分配最大内存
切线空间正交化
uv有黑边
Mikktspace算法
